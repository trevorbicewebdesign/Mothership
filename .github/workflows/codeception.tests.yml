name: Run Mothership Tests

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main
    
jobs:
  
  build:
    name: Build PHP 8.2 Joomla 5.3.0 Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: mothership-php8.2-joomla5.3.0
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Restore Cached Joomla Image
        uses: actions/cache@v4
        id: docker-cache
        with:
          path: /tmp/docker-cache
          key: docker-php8.2-joomla5.3.0
          restore-keys: docker-

      - name: Build or Load Joomla Image
        run: |
          if [ -f /tmp/docker-cache/mothership-joomla.tar.gz ]; then
            echo "Cached image found, loading..."
            gunzip -c /tmp/docker-cache/mothership-joomla.tar.gz | docker load
          else
            echo "No cached image, building Joomla..."
            docker build -t mothership-php8.2-joomla5.3.0 -f docker/Dockerfile .
            mkdir -p /tmp/docker-cache
            docker save mothership-php8.2-joomla5.3.0 | gzip > /tmp/docker-cache/mothership-joomla.tar.gz
          fi

      - name: Save Joomla Image to Cache
        uses: actions/cache@v4
        with:
          path: /tmp/docker-cache
          key: docker-php8.2-joomla5.3.0
          restore-keys: docker-


  test:
    name: Run Codeception Tests
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - suite: functional
          - suite: api
          - suite: integration
          - suite: acceptance
            group: backend
          - suite: acceptance
            group: frontend

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Load Cached Docker Image
        uses: actions/cache@v4
        with:
          path: /tmp/docker-cache
          key: docker-${{ needs.build.outputs.image-tag }}
          restore-keys: docker-

      - name: Load Docker Image into Daemon
        run: |
          gunzip -c /tmp/docker-cache/mothership-joomla.tar.gz | docker load

      - name: Rename .env.sample to .env
        run: |
          mv ./tests/.env.sample ./tests/.env

      - name: Start Docker Services
        run: docker compose up -d

      - name: Dump MySQL logs
        run: docker compose logs db

      - name: Wait for Database to be ready
        run: |
          echo "Waiting for Database..."
          until docker compose exec db mysqladmin ping -h "localhost" --silent; do
            echo "Still waiting for MySQL server to start..."
            sleep 5
          done
          echo "MySQL server is up."

          echo "Waiting for Joomla Database..."
          until docker compose exec db mysql -uroot -proot -e "USE local"; do
            echo "Still waiting for Joomla database to be ready..."
            sleep 5
          done
          echo "Joomla Database is ready."

      - name: Wait for Joomla Web to be ready
        run: |
          echo "Waiting for Joomla Web..."
          until curl --fail --silent --output /dev/null http://localhost:8080; do
            echo "Still waiting for Joomla Web..."
            sleep 5
          done
          echo "Joomla Web is ready."

      - name: Discover & Install Mothership via CLI
        run: |
          docker compose exec joomla sh -c "php /var/www/html/cli/joomla.php extension:discover"
          docker compose exec joomla sh -c "php /var/www/html/cli/joomla.php extension:discover:install"
          docker compose exec db mysql -uroot -proot -e "UPDATE local.jos_extensions SET enabled = 1 WHERE type = 'plugin' AND folder = 'mothership-payment' AND element = 'zelle';"
          docker compose exec db mysql -uroot -proot -e "UPDATE local.jos_extensions SET enabled = 1 WHERE type = 'plugin' AND folder = 'mothership-payment' AND element = 'paybycheck';"
      
      - name: Add Joomla User & Suppress Popup
        run: |
            docker compose exec joomla sh -c "php /var/www/html/cli/joomla.php user:add \
            --username=admin \
            --name='Site Admin' \
            --password='password123!test' \
            --email='admin@example.com' \
            --usergroup='Super Users' --quiet"

      - name: Export Database
        run: |
          docker compose exec db sh -c "mysqldump -uroot -proot --no-tablespaces --skip-comments --extended-insert=false local" | docker compose exec -T joomla sh -c "cat > /var/www/html/tests/_support/Data/db/dump.sql"

      - name: Run Codeception Tests for ${{ matrix.suite }}
        run: |
          if [ "${{ matrix.group }}" != "" ]; then
            docker compose exec joomla sh -c "/var/www/html/vendor/bin/codecept run ${{ matrix.suite }} --group ${{ matrix.group }} -d -f"
          else
            docker compose exec joomla sh -c "/var/www/html/vendor/bin/codecept run ${{ matrix.suite }} -d -f"
          fi

      - name: Copy Test Artifacts (always)
        if: always()
        run: |
          mkdir -p test-artifacts/${{ matrix.suite }}-${{ matrix.group || 'default' }}
          cp -v tests/_output/* test-artifacts/${{ matrix.suite }}-${{ matrix.group || 'default' }}/ || true
          cp -v tests/_output/debug/* test-artifacts/${{ matrix.suite }}-${{ matrix.group || 'default' }}/ || true
          cp -v wp-content/debug.log test-artifacts/${{ matrix.suite }}-${{ matrix.group || 'default' }}/ || true
          cp -v /var/log/php_errors.log test-artifacts/${{ matrix.suite }}-${{ matrix.group || 'default' }}/ || true

      - name: Upload Artifacts for Suite
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.suite }}-${{ matrix.group || 'default' }}-output-${{ github.sha }}
          path: test-artifacts/${{ matrix.suite }}-${{ matrix.group || 'default' }}/
  
      - name: Teardown
        if: always()
        run: docker compose down -v
