name: Run Mothership Tests

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main

jobs:

  build:
    name: Build & Push Joomla Docker Image (if needed)
    runs-on: ubuntu-latest
    outputs:
      image-tag: ghcr.io/${{ github.repository_owner }}/mothership:php8.2-joomla5.3.0
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if GHCR image already exists
        id: image-check
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/mothership"
          TAG="php8.2-joomla5.3.0"
          REPO_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')

          echo "Checking GHCR for image $IMAGE:$TAG"
          TOKEN=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://ghcr.io/token\?scope\=repository:$REPO_LOWER/mothership:pull | jq -r .token)

          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
            https://ghcr.io/v2/$REPO_LOWER/mothership/manifests/$TAG)

          echo "GHCR check status: $STATUS"
          if [ "$STATUS" = "200" ]; then
            echo "Image already exists. Skipping build."
            echo "skip=true" >> "$GITHUB_OUTPUT"
          else
            echo "Image does not exist. Proceeding with build."
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and Push Docker Image
        if: steps.image-check.outputs.skip != 'true'
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/mothership:php8.2-joomla5.3.0 -f docker/Dockerfile .
          docker push ghcr.io/${{ github.repository_owner }}/mothership:php8.2-joomla5.3.0


  test:
    name: Run Codeception Tests
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - suite: functional
          - suite: api
          - suite: integration
          - suite: acceptance
            group: backend-client
          - suite: acceptance
            group: backend-account
          - suite: acceptance
            group: backend-project
          - suite: acceptance
            group: backend-domain
          - suite: acceptance
            group: backend-payment
          - suite: acceptance
            group: frontend

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Joomla Docker Image from GHCR
        run: |
          docker pull ${{ needs.build.outputs.image-tag }}

      - name: Patch docker-compose.yml with GHCR image
        run: |
          IMAGE="${{ needs.build.outputs.image-tag }}"
          sed -i "s|image:.*|image: $IMAGE|" docker-compose.yml

      - name: Rename .env.sample to .env
        run: mv ./tests/.env.sample ./tests/.env

      - name: Start Docker Services
        run: docker compose up -d

      - name: Dump MySQL logs
        run: docker compose logs db

      - name: Wait for Database to be ready
        run: |
          echo "Waiting for Database..."
          until docker compose exec db mysqladmin ping -h "localhost" --silent; do
            echo "Still waiting for MySQL server to start..."
            sleep 5
          done
          echo "MySQL server is up."

          echo "Waiting for Joomla Database..."
          until docker compose exec db mysql -uroot -proot -e "USE local"; do
            echo "Still waiting for Joomla database to be ready..."
            sleep 5
          done
          echo "Joomla Database is ready."

      - name: Wait for Joomla Web to be ready
        run: |
          echo "Waiting for Joomla Web..."
          until curl --fail --silent --output /dev/null http://localhost:8080; do
            echo "Still waiting for Joomla Web..."
            sleep 5
          done
          echo "Joomla Web is ready."

      - name: Discover & Install Mothership via CLI
        run: |
          docker compose exec joomla sh -c "php /var/www/html/cli/joomla.php extension:discover"
          docker compose exec joomla sh -c "php /var/www/html/cli/joomla.php extension:discover:install"
          docker compose exec db mysql -uroot -proot -e "UPDATE local.jos_extensions SET enabled = 1 WHERE type = 'plugin' AND folder = 'mothership-payment' AND element = 'zelle';"
          docker compose exec db mysql -uroot -proot -e "UPDATE local.jos_extensions SET enabled = 1 WHERE type = 'plugin' AND folder = 'mothership-payment' AND element = 'paybycheck';"

      - name: Add Joomla User & Suppress Popup
        run: |
          docker compose exec joomla sh -c "php /var/www/html/cli/joomla.php user:add \
          --username=admin \
          --name='Site Admin' \
          --password='password123!test' \
          --email='admin@example.com' \
          --usergroup='Super Users' --quiet"

      - name: Export Database
        run: |
          docker compose exec db sh -c "mysqldump -uroot -proot --no-tablespaces --skip-comments --extended-insert=false local" | docker compose exec -T joomla sh -c "cat > /var/www/html/tests/_support/Data/db/dump.sql"

      - name: Run Codeception Tests for ${{ matrix.suite }}
        run: |
          if [ "${{ matrix.group }}" != "" ]; then
            docker compose exec joomla sh -c "/var/www/html/vendor/bin/codecept run ${{ matrix.suite }} --group ${{ matrix.group }}"
          else
            docker compose exec joomla sh -c "/var/www/html/vendor/bin/codecept run ${{ matrix.suite }}"
          fi

      - name: Copy Test Artifacts (always)
        if: always()
        run: |
          mkdir -p test-artifacts/${{ matrix.suite }}-${{ matrix.group || 'default' }}
          cp -v tests/_output/* test-artifacts/${{ matrix.suite }}-${{ matrix.group || 'default' }}/ || true
          cp -v tests/_output/debug/* test-artifacts/${{ matrix.suite }}-${{ matrix.group || 'default' }}/ || true
          cp -v wp-content/debug.log test-artifacts/${{ matrix.suite }}-${{ matrix.group || 'default' }}/ || true
          cp -v /var/log/php_errors.log test-artifacts/${{ matrix.suite }}-${{ matrix.group || 'default' }}/ || true

      - name: Upload Artifacts for Suite
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.suite }}-${{ matrix.group || 'default' }}-output-${{ github.sha }}
          path: test-artifacts/${{ matrix.suite }}-${{ matrix.group || 'default' }}/

      - name: Teardown
        if: always()
        run: docker compose down -v
