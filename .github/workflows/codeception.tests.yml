name: CI

on: workflow_dispatch

jobs:
  # ─────────────────────────────────────────────────────────────────────────────
  # 1) Build + cache the image
  build-image:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore image cache
        uses: actions/cache@v3
        with:
          path: docker-image
          key: image-${{ github.sha }}

      - name: Build & save Docker image
        id: build
        run: |
          IMAGE_TAG=mothership-app:${{ github.sha }}
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          mkdir -p docker-image
          docker build -t $IMAGE_TAG -f docker/Dockerfile .
          docker save $IMAGE_TAG | gzip > docker-image/mothership-app.tar.gz

      - name: Update image cache
        uses: actions/cache@v3
        with:
          path: docker-image
          key: image-${{ github.sha }}

  # ─────────────────────────────────────────────────────────────────────────────
  # 2) Test matrix, reusing the cached image TAR
  test:
    needs: build-image
    runs-on: ubuntu-latest

    strategy:
      matrix:
        suite: [acceptance, functional, api, integration]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore image cache
        uses: actions/cache@v3
        with:
          path: docker-image
          key: image-${{ github.sha }}

      - name: Load Docker image
        run: |
          gunzip -c docker-image/mothership-app.tar.gz | docker load

      - name: Spin up containers for ${{ matrix.suite }}
        run: |
          docker compose -p suite-${{ matrix.suite }} up -d --no-build

      - name: Wait for MySQL
        run: |
          until docker compose -p suite-${{ matrix.suite }} \
                  exec db mysqladmin ping -hlocalhost --silent; do
            sleep 3
          done

      - name: Prepare Joomla
        run: |
          docker compose -p suite-${{ matrix.suite }} exec joomla \
            bash -lc "cp tests/configuration.php configuration.php && rm -rf installation"

      - name: Install Mothership
        run: |
          docker compose -p suite-${{ matrix.suite }} exec joomla \
            bash -lc "chmod +x cli/joomla.php && \
                      php cli/joomla.php extension:install --path tmp/mothership"

      - name: Run ${{ matrix.suite }} tests
        run: |
          docker compose -p suite-${{ matrix.suite }} exec --user root joomla \
            bash -lc "/root/.composer/vendor/bin/codecept run ${{ matrix.suite }} -d -f"

      - name: Teardown
        if: always()
        run: docker compose -p suite-${{ matrix.suite }} down -v
